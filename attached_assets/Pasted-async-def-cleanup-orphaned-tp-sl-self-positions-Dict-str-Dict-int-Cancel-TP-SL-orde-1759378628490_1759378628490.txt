async def cleanup_orphaned_tp_sl(self, positions: Dict[str, Dict]) -> int:
    """Cancel TP/SL orders that don't have matching positions."""
    canceled_count = 0
    all_orders = await self.get_open_orders()
    current_time = time.time() * 1000
    
    for order in all_orders:
        order_type = order.get('type', '')
        symbol = order['symbol']
        order_id = str(order['orderId'])
        position_side = order.get('positionSide', 'BOTH')
        order_time = order.get('time', 0)
        order_age_seconds = (current_time - order_time) / 1000
        
        # Check if this is a TP/SL order
        is_tp_sl = order_type in [
            'TAKE_PROFIT_MARKET',
            'STOP_MARKET',
            'TAKE_PROFIT',
            'STOP',
            'STOP_LOSS'
        ]
        
        if is_tp_sl:
            # Don't cancel orders younger than 60 seconds
            # (prevents race conditions)
            if order_age_seconds < 60:
                continue
            
            # Check if matching position exists
            should_cancel = False
            
            if config.GLOBAL_SETTINGS.get('hedge_mode', False):
                # Hedge mode: check position side
                side_key = f"{symbol}_{position_side}"
                side_position = positions.get(side_key)
                
                if not side_position or not side_position.get('has_position', False):
                    should_cancel = True
                    log.warning(f"Found orphaned {order_type} order {order_id} for {symbol}")
            else:
                # One-way mode: check symbol
                position = positions.get(symbol)
                if not position or not position.get('has_position', False):
                    should_cancel = True
                    log.warning(f"Found orphaned {order_type} order {order_id}")
            
            if should_cancel:
                # Safety check: don't cancel if recent fills exist
                conn = sqlite3.connect(config.DB_PATH)
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT COUNT(*) FROM trades
                    WHERE symbol = ? AND status = 'FILLED'
                    AND timestamp > ?
                """, (symbol, current_time - 300000))  # Last 5 minutes
                
                recent_fills = cursor.fetchone()[0]
                conn.close()
                
                if recent_fills > 0:
                    log.info(f"Skipping cancellation - recent fills exist")
                    continue
                
                # Cancel the orphaned order
                if await self.cancel_order(symbol, order_id):
                    canceled_count += 1
    
    return canceled_count