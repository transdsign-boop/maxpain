import hmac
import hashlib
import time
import requests
def create_signature(query_string, secret):
    """Create HMAC SHA256 signature."""
    return hmac.new(
        secret.encode('utf-8'), 
        query_string.encode('utf-8'), 
        hashlib.sha256
    ).hexdigest()
def make_authenticated_request(method, url, data=None, params=None):
    """Make an authenticated request using HMAC signature."""
    timestamp = int(time.time() * 1000)
    
    if method.upper() == 'POST':
        if data is None:
            data = {}
        data['timestamp'] = timestamp
        
        # Create signature
        query_string = urllib.parse.urlencode(data, doseq=True)
        signature = create_signature(query_string, API_SECRET)
        data['signature'] = signature
        
        headers = {
            'X-MBX-APIKEY': API_KEY,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        response = requests.post(url, headers=headers, data=data)
    
    return response
2. Get Account Information
# Get account balance and PnL
def fetch_account_info():
    """Fetch account information from exchange."""
    response = make_authenticated_request(
        'GET',
        'https://fapi.asterdex.com/fapi/v2/account'
    )
    
    if response.status_code == 200:
        account = response.json()
        # Returns:
        # {
        #   "totalWalletBalance": "1000.00",  # Total account balance
        #   "totalUnrealizedProfit": "50.00", # Unrealized P&L
        #   "availableBalance": "900.00",     # Available for trading
        #   "totalMarginBalance": "1050.00",  # Balance + unrealized PnL
        #   ...
        # }
        return account
    return None
3. Get Current Positions
def fetch_exchange_positions():
    """Fetch current positions from exchange."""
    response = make_authenticated_request(
        'GET',
        'https://fapi.asterdex.com/fapi/v2/positionRisk'
    )
    
    if response.status_code == 200:
        positions = response.json()
        # Filter out positions with zero quantity
        return [p for p in positions if float(p.get('positionAmt', 0)) != 0]
    return []
# Each position returns:
# {
#   "symbol": "BTCUSDT",
#   "positionAmt": "0.5",        # Quantity (negative for shorts)
#   "entryPrice": "65000.00",    # Average entry price
#   "markPrice": "66000.00",     # Current mark price
#   "leverage": "10",            # Leverage
#   "unRealizedProfit": "500.00",# Unrealized P&L
#   "positionSide": "LONG",      # LONG/SHORT/BOTH
#   ...
# }
4. Execute Market Order
async def place_order(symbol, side, qty, price, order_type='LIMIT', 
                      position_side='BOTH', offset_pct=0.1):
    """Place an order on the exchange."""
    
    # Format order parameters
    order_params = {
        'symbol': symbol,
        'side': side,              # BUY or SELL
        'type': order_type,        # MARKET or LIMIT
        'quantity': qty,
        'positionSide': position_side,  # LONG/SHORT for hedge mode
        'recvWindow': 5000
    }
    
    # Add price for limit orders
    if order_type == 'LIMIT':
        order_params['price'] = price
        order_params['timeInForce'] = 'GTC'  # Good Till Cancel
    
    # Send request
    url = f"{BASE_URL}/fapi/v1/order"
    response = make_authenticated_request('POST', url, data=order_params)
    
    if response.status_code == 200:
        result = response.json()
        # Returns:
        # {
        #   "orderId": 123456,
        #   "symbol": "BTCUSDT",
        #   "status": "FILLED",
        #   "executedQty": "0.5",
        #   "avgPrice": "65000.00",
        #   ...
        # }
        return result
    else:
        print(f"Order failed: {response.text}")
        return None
5. Place Take Profit & Stop Loss Orders
def calculate_tp_price(entry_price, side, tp_pct):
    """Calculate take profit price."""
    if side == 'BUY':  # Long position
        return entry_price * (1 + tp_pct / 100)
    else:  # Short position
        return entry_price * (1 - tp_pct / 100)
def calculate_sl_price(entry_price, side, sl_pct):
    """Calculate stop loss price."""
    if side == 'BUY':  # Long position
        return entry_price * (1 - sl_pct / 100)
    else:  # Short position
        return entry_price * (1 + sl_pct / 100)
# Place TP order
tp_order = {
    'symbol': 'BTCUSDT',
    'side': 'SELL',                    # Opposite of entry
    'type': 'TAKE_PROFIT_MARKET',
    'stopPrice': tp_price,             # Trigger price
    'closePosition': 'true',           # Close entire position
    'positionSide': 'LONG',
    'workingType': 'CONTRACT_PRICE'    # Use contract price (not mark price)
}
# Place SL order
sl_order = {
    'symbol': 'BTCUSDT',
    'side': 'SELL',
    'type': 'STOP_MARKET',
    'stopPrice': sl_price,
    'closePosition': 'true',
    'positionSide': 'LONG',
    'workingType': 'CONTRACT_PRICE'
}
6. Batch Order Execution (More Efficient)
async def place_batch_orders(orders_batch):
    """Place multiple orders in a single API call (max 5)."""
    batch_data = {
        'batchOrders': json.dumps(orders_batch),
        'recvWindow': 5000
    }
    
    url = f"{BASE_URL}/fapi/v1/batchOrders"
    response = make_authenticated_request('POST', url, data=batch_data)
    
    if response.status_code == 200:
        results = response.json()
        # Returns array of order results
        return results
    return None
# Example: Place entry + TP + SL in one call
orders = [
    {
        'symbol': 'BTCUSDT',
        'side': 'BUY',
        'type': 'LIMIT',
        'quantity': '0.5',
        'price': '65000.00',
        'timeInForce': 'GTC',
        'positionSide': 'LONG'
    },
    {
        'symbol': 'BTCUSDT',
        'side': 'SELL',
        'type': 'TAKE_PROFIT_MARKET',
        'stopPrice': '66300.00',
        'closePosition': 'true',
        'positionSide': 'LONG'
    },
    {
        'symbol': 'BTCUSDT',
        'side': 'SELL',
        'type': 'STOP_MARKET',
        'stopPrice': '58500.00',
        'closePosition': 'true',
        'positionSide': 'LONG'
    }
]
7. Get Open Orders
def get_open_orders(symbol=None):
    """Get all open orders."""
    url = f"{BASE_URL}/fapi/v1/openOrders"
    params = {}
    if symbol:
        params['symbol'] = symbol
    
    response = make_authenticated_request('GET', url, params=params)
    
    if response.status_code == 200:
        return response.json()
    return []